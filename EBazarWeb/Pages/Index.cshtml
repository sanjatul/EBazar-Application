@page
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}

<div class="ps-3 pe-3 xl:ps-0 xl:pe-0">
   @*  Top Three Boxs *@
    <div class="grid grid-cols-1 md:grid-cols-3 mt-5 gap-5">
        <div class="bg-[#2F80ED] p-4 rounded-lg">
            <div class="flex flex-col ps-3 pe-5 pt-3 pb-3 gap-4">
                <div class="flex justify-start">
                    <svg width="48" height="48" viewBox="0 0 48 48" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <rect width="48" height="48" rx="8" fill="white" />
                        <path d="M39.5803 18.8518L24.5802 8.185C24.2335 7.93833 23.7682 7.93833 23.4215 8.185L8.42134 18.8518C8.15733 19.0384 8 19.3425 8 19.6665V24.3332C8 24.7078 8.20934 25.0505 8.54134 25.2225C8.87468 25.3932 9.27335 25.3652 9.57868 25.1492L10.6667 24.3745V38.6667C10.6667 39.4027 11.264 40 12 40H14.6667V23.9998H33.3336V40H36.0003C36.7363 40 37.3336 39.4027 37.3336 38.6667V24.3745L38.4203 25.1478C38.5937 25.2705 38.7963 25.3332 39.0003 25.3332C39.1577 25.3332 39.3137 25.2958 39.459 25.2225C39.791 25.0505 40.0003 24.7078 40.0003 24.3332V19.6665C40.0003 19.3425 39.843 19.0384 39.5803 18.8518Z" fill="#2F80ED" />
                        <path d="M16.6668 36.6666H31.3336V40H16.6668V36.6666Z" fill="#2F80ED" />
                        <path d="M16.6668 31.3332H31.3336V34.6666H16.6668V31.3332Z" fill="#2F80ED" />
                        <path d="M16.6668 25.9999H31.3336V29.3332H16.6668V25.9999Z" fill="#2F80ED" />
                    </svg>
                </div>
                <div class="flex flex-col gap-2">
                    <h3 class="text-white font-inter text-[22px] font-semibold">Total Product : 100</h3>
                    <p class="text-white font-inter text-[16px] leading-relaxed">
                        Warehouse has total of 100 product today & the max capacity is 200.
                    </p>
                </div>
            </div>
        </div>

        <div class="bg-[#2F80ED] p-4 rounded-lg">
            <div class="flex flex-col ps-3 pe-5 pt-3 pb-3 gap-4">
                <div class="flex justify-start">
                    <svg width="48" height="48" viewBox="0 0 48 48" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <rect width="48" height="48" rx="8" fill="white" />
                        <path fill-rule="evenodd" clip-rule="evenodd" d="M17.7291 8C20.8845 8 23.4462 10.5618 23.4462 13.7172C23.4462 16.8726 20.8845 19.4344 17.7291 19.4344C14.5736 19.4344 12.0119 16.8726 12.0119 13.7172C12.0119 10.5618 14.5736 8 17.7291 8ZM25.7899 24.1299C27.33 22.8735 29.2969 22.1189 31.4379 22.1189C36.3719 22.1189 40.3784 26.1255 40.3784 31.0595C40.3784 35.9934 36.3719 40 31.4379 40C26.5039 40 22.4973 35.9934 22.4973 31.0595C22.4973 27.9374 24.1055 25.5044 25.7899 24.1299ZM30.2482 35.4379C30.2864 36.0614 30.8049 36.5561 31.4379 36.5561C32.059 36.5561 32.5704 36.0793 32.6252 35.4713C32.7146 35.4487 32.8016 35.4224 32.8851 35.3926C33.9865 35.0028 34.7828 34.1553 34.7828 32.6807C34.7828 31.2371 33.7946 30.4944 32.4082 30.0903C31.9278 29.9496 31.3986 29.8471 30.936 29.6921C30.8013 29.6469 30.6738 29.5992 30.5629 29.5348C30.526 29.5133 30.4771 29.5014 30.4771 29.4525C30.4771 29.089 30.762 28.9543 31.0648 28.9125C31.6787 28.8267 32.4166 29.0103 32.9077 29.3536C33.4465 29.7303 34.1904 29.598 34.5671 29.0592C34.9438 28.5191 34.8127 27.7753 34.2726 27.3986C33.8101 27.0755 33.2332 26.8252 32.6276 26.675C32.5859 26.0539 32.0685 25.5628 31.4379 25.5628C30.8156 25.5628 30.303 26.0408 30.2506 26.65C29.5866 26.8324 29.0239 27.1888 28.6389 27.7073C28.3075 28.152 28.0929 28.7242 28.0929 29.4525C28.0929 30.8961 29.0812 31.6388 30.4675 32.0429C30.948 32.1836 31.4772 32.2861 31.9398 32.4411C32.0745 32.4864 32.202 32.5352 32.3129 32.5984C32.3498 32.6199 32.3987 32.6318 32.3987 32.6807C32.3987 33.0407 32.1162 33.167 31.817 33.2076C31.1947 33.2922 30.4497 33.1039 29.9526 32.7689C29.4066 32.4005 28.6651 32.5448 28.2968 33.0907C27.9296 33.6355 28.0739 34.377 28.6186 34.7453C29.0776 35.0553 29.6474 35.2925 30.2482 35.4379ZM22.6559 38.2071C18.7983 38.2119 13.5353 38.2119 10.585 38.2119C8.67645 38.2119 7.10411 36.7146 7.01113 34.8085C7.01113 34.7978 7.01113 34.7859 7.00994 34.7751C6.96941 32.7808 7.03139 29.6862 7.60597 26.1982C7.90995 24.3552 9.48706 22.0378 11.094 21.0592C11.1595 21.0198 11.2239 20.9805 11.2883 20.9423C11.6972 20.698 12.2133 20.7206 12.5996 21.0019C14.0825 22.0796 15.9076 22.7149 17.8793 22.7149C19.8509 22.7149 21.676 22.0796 23.1589 21.0019C23.5428 20.723 24.0542 20.6992 24.4631 20.9388C24.5298 20.9781 24.5966 21.0186 24.6645 21.0592C24.8851 21.1927 25.1044 21.3512 25.3202 21.5288C24.9602 21.7613 24.6133 22.0128 24.2831 22.2834C22.1493 24.0238 20.1132 27.1065 20.1132 31.0595C20.1132 33.769 21.0669 36.2569 22.6559 38.2071Z" fill="#2F80ED" />
                    </svg>

                </div>
                <div class="flex flex-col gap-2">
                    <h3 class="text-white font-inter text-[22px] font-semibold">Total Vendor: 06</h3>
                    <p class="text-white font-inter text-[16px] leading-relaxed">
                        A total of 6 out of 10 vendor are available for supply now.
                    </p>
                </div>
            </div>
        </div>

        <div class="bg-[#2F80ED] p-4 rounded-lg">
            <div class="flex flex-col ps-3 pe-5 pt-3 pb-3 gap-4">
                <div class="flex justify-start">
                    <svg width="48" height="48" viewBox="0 0 48 48" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <rect width="48" height="48" rx="8" fill="white" />
                        <path d="M21.3627 22.5642C21.8067 22.75 22.2673 22.8936 22.7383 22.9929V40C22.4494 39.9255 22.1683 39.8239 21.8987 39.6963L11.1799 34.9265C10.2335 34.5052 9.42945 33.8186 8.86509 32.9499C8.30074 32.0812 8.00025 31.0675 8 30.0316V18.1337C8.00142 17.6566 8.06753 17.1818 8.19651 16.7224L21.3627 22.5642ZM29.1159 18.5804L14.5563 11.7382L11.1799 13.2388C10.571 13.5065 10.0191 13.8886 9.55422 14.3643L22.4346 20.0988C22.9521 20.3285 23.512 20.4472 24.0781 20.4472C24.6443 20.4472 25.2042 20.3285 25.7217 20.0988L29.1159 18.5804ZM38.602 14.3643C38.1372 13.8886 37.5853 13.5065 36.9764 13.2388L26.2576 8.469C25.5726 8.15987 24.8297 8 24.0781 8C23.3266 8 22.5837 8.15987 21.8987 8.469L17.8077 10.2912L32.3673 17.1333L38.602 14.3643ZM39.9598 16.7224L33.6893 19.5093V23.8861C33.6893 24.2415 33.5481 24.5823 33.2969 24.8336C33.0456 25.0848 32.7048 25.226 32.3494 25.226C31.9941 25.226 31.6533 25.0848 31.402 24.8336C31.1508 24.5823 31.0096 24.2415 31.0096 23.8861V20.6884L26.7936 22.5642C26.3466 22.742 25.8868 22.8853 25.418 22.9929V40C25.7068 39.9255 25.988 39.8239 26.2576 39.6963L36.9764 34.9265C37.9228 34.5052 38.7268 33.8186 39.2912 32.9499C39.8555 32.0812 40.156 31.0675 40.1563 30.0316V18.1337C40.1548 17.6566 40.0887 17.1818 39.9598 16.7224Z" fill="#2F80ED" />
                    </svg>
                </div>
                <div class="flex flex-col gap-2">
                    <h3 class="text-white font-inter text-[22px] font-semibold">Unique Product : 40</h3>
                    <p class="text-white font-inter text-[16px] leading-relaxed">
                        Total number of products that are not duplicate or redundant.
                    </p>
                </div>
            </div>
        </div>
    </div>
    <div class="mt-5">
        <div class="flex flex-col sm:flex-row sm:items-center gap-4 w-full mx-auto">
            <!-- Search box -->
            <div class="flex items-center w-full h-[48px] bg-gray-100 rounded-md px-4 py-2">
                <input type="text"
                       id="searchInput"
                       placeholder="Search Product"
                       class="flex-grow bg-transparent font-inter text-[14px] outline-none text-gray-700" />
                <svg xmlns="http://www.w3.org/2000/svg"
                     class="h-5 w-5 text-blue-600 cursor-pointer"
                     fill="none"
                     viewBox="0 0 24 24"
                     stroke="currentColor"
                     onclick="searchProducts()">
                    <path stroke-linecap="round"
                          stroke-linejoin="round"
                          stroke-width="2"
                          d="M21 21l-4.35-4.35M17 10a7 7 0 11-14 0 7 7 0 0114 0z" />
                </svg>
            </div>

            <!-- Add Product button -->
            <button onclick="openModal()" class="flex items-center justify-center gap-1 border border-blue-500 text-blue-500 hover:bg-blue-50 font-medium px-3 py-1.5 h-[48px] rounded-md min-w-[220px]">
                <svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <g clip-path="url(#clip0_4_227)">
                        <path d="M10 20C4.48578 20 0 15.5142 0 10C0 4.48578 4.48578 0 10 0C15.5142 0 20 4.48578 20 10C20 15.5142 15.5142 20 10 20ZM10 1.25C5.17502 1.25 1.25 5.17502 1.25 10C1.25 14.825 5.17502 18.75 10 18.75C14.825 18.75 18.75 14.825 18.75 10C18.75 5.17502 14.825 1.25 10 1.25Z" fill="#2F80ED" />
                        <path d="M14.375 10.625H5.625C5.28 10.625 5 10.345 5 10C5 9.655 5.28 9.375 5.625 9.375H14.375C14.72 9.375 15 9.655 15 10C15 10.345 14.72 10.625 14.375 10.625Z" fill="#2F80ED" />
                        <path d="M10 15C9.655 15 9.375 14.72 9.375 14.375V5.625C9.375 5.28 9.655 5 10 5C10.345 5 10.625 5.28 10.625 5.625V14.375C10.625 14.72 10.345 15 10 15Z" fill="#2F80ED" />
                    </g>
                    <defs>
                        <clipPath id="clip0_4_227">
                            <rect width="20" height="20" fill="white" />
                        </clipPath>
                    </defs>
                </svg>
                Add Product
            </button>
        </div>
    </div>

    <!-- Loading indicator -->
    <div id="loadingIndicator" class="hidden mt-4 text-center">
        <div class="inline-flex items-center">
            <svg class="animate-spin h-5 w-5 mr-3 text-blue-600" viewBox="0 0 24 24">
                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
            Loading products...
        </div>
    </div>

    <!-- Product Section -->
    <div class="mt-5">
        <div id="resultsInfo" class="text-sm text-gray-600 mb-4 text-[24px] font-inter mb-5">
            <!-- Results info will be populated by JavaScript -->
        </div>

        <div id="productsContainer">
            <div id="productsGrid" class="grid grid-cols-1 sm:grid-cols-1 md:grid-cols-2 lg:grid-cols-4">
                <!-- Products will be populated by JavaScript -->
            </div>

            <!-- Pagination -->
            <div id="paginationContainer" class="flex flex-col sm:flex-row items-center justify-end mt-6 gap-4">
                <!-- Pagination will be populated by JavaScript -->
            </div>
        </div>

        <!-- No results message -->
        <div id="noResults" class="hidden text-center py-8">
            <div class="text-gray-500 text-lg">No products found</div>
            <div class="text-gray-400 text-sm mt-2">Try adjusting your search criteria</div>
        </div>

        <!-- Error message -->
        <div id="errorMessage" class="hidden bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mt-4">
            <span id="errorText">Failed to load products. Please try again.</span>
        </div>
    </div>
<!-- Add Product Modal -->
    <div id="addProductModal" class="fixed inset-0 z-50 flex items-center justify-center bg-black/30 backdrop-blur-sm hidden">
        <div class="bg-white rounded-lg shadow-lg w-full max-w-2xl p-6 mx-4">
            <div class="flex justify-between items-center mb-4">
                <h2 class="text-2xl font-semibold">Add New Product</h2>
                <button onclick="closeModal()" class="text-gray-500 hover:text-gray-600 text-2xl">&times;</button>
            </div>

            <!-- Messages -->
            <div id="messageContainer"></div>

            <form id="productForm" class="space-y-4">
                <div id="validationSummary"></div>

                <div>
                    <label class="block text-sm font-medium">Product Name</label>
                    <input name="Name" type="text" class="w-full border border-gray-300 rounded-md px-3 py-2" />
                    <span id="Name-error" class="text-red-600 text-sm"></span>
                </div>

                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                        <label class="block text-sm font-medium">Slug</label>
                        <div class="flex">
                            <input name="Slug" id="slugInput" type="text" class="flex-grow border border-gray-300 rounded-l-md px-3 py-2" />
                            <button type="button" onclick="generateSlug()" class="bg-blue-500 text-white px-4 rounded-r-md">Generate</button>
                        </div>
                        <span id="Slug-error" class="text-red-600 text-sm"></span>
                    </div>

                    <div>
                        <label class="block text-sm font-medium">Price</label>
                        <input name="Price" type="number" step="0.01" class="w-full border border-gray-300 rounded-md px-3 py-2" />
                        <span id="Price-error" class="text-red-600 text-sm"></span>
                    </div>
                </div>

                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                        <label class="block text-sm font-medium">Discount</label>
                        <input name="Discount" type="number" step="0.01" class="w-full border border-gray-300 rounded-md px-3 py-2" />
                        <span id="Discount-error" class="text-red-600 text-sm"></span>
                    </div>

                    <div>
                        <label class="block text-sm font-medium">Quantity</label>
                        <input name="Quantity" type="number" class="w-full border border-gray-300 rounded-md px-3 py-2" />
                        <span id="Quantity-error" class="text-red-600 text-sm"></span>
                    </div>
                </div>

                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                        <label class="block text-sm font-medium">Discount Start</label>
                        <input name="StartDate" type="date" class="w-full border border-gray-300 rounded-md px-3 py-2" />
                        <span id="StartDate-error" class="text-red-600 text-sm"></span>
                    </div>

                    <div>
                        <label class="block text-sm font-medium">Discount End</label>
                        <input name="EndDate" type="date" class="w-full border border-gray-300 rounded-md px-3 py-2" />
                        <span id="EndDate-error" class="text-red-600 text-sm"></span>
                    </div>
                </div>

                <div>
                    <label class="block text-sm font-medium">Product Image</label>
                    <input name="ImageFile" type="file" class="w-full border border-gray-300 rounded-md px-3 py-2" />
                    <span id="ImageFile-error" class="text-red-600 text-sm"></span>
                </div>

                <div class="flex justify-end">
                    <button type="submit" id="submitBtn" class="bg-blue-600 text-white px-6 py-2 rounded-md hover:bg-blue-700">
                        Add
                    </button>
                </div>
            </form>
        </div>
    </div>



@section Scripts {
    <script>
            // Global variables
            let currentPage = 1;
            let pageSize = 8;
            let currentSearch = '';
            let totalRecords = 0;
            let totalPages = 0;

            // Initialize page
            document.addEventListener('DOMContentLoaded', function() {
                loadProducts();

                // Add search on Enter key
                document.getElementById('searchInput').addEventListener('keypress', function(e) {
                    if (e.key === 'Enter') {
                        searchProducts();
                    }
                });
            });
               // Open Modal
               function openModal() {
                document.getElementById('addProductModal').classList.remove('hidden');
            }
                 // close Modal
            function closeModal() {
                document.getElementById('addProductModal').classList.add('hidden');
                clearForm();
                clearMessages();
                clearValidationErrors();
            }
                // generate Slug
            function generateSlug() {
                const nameInput = document.querySelector('input[name="Name"]');
                const slugInput = document.getElementById('slugInput');

                if (nameInput.value) {
                    const slug = nameInput.value
                        .toLowerCase()
                        .replace(/[^a-z0-9]+/g, '-')
                        .replace(/(^-|-$)/g, '');
                    slugInput.value = slug;
                }
            }
                // Clear Validation error
            function clearValidationErrors() {
                const errorElements = document.querySelectorAll('.text-red-600');
                errorElements.forEach(element => {
                    element.textContent = '';
                });
            }
                // Display Validation error
            function displayValidationErrors(errors) {
                clearValidationErrors();

                for (const [field, messages] of Object.entries(errors)) {
                    const errorElement = document.getElementById(`${field}-error`);
                    if (errorElement && messages.length > 0) {
                        errorElement.textContent = messages[0];
                    }
                }

            }

            function showMessage(message, type) {
                const messageContainer = document.getElementById('messageContainer');
                const messageClasses = type === 'success'
                    ? 'bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded mb-4'
                    : 'bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4';

                messageContainer.innerHTML = `
                    <div class="${messageClasses}">
                        ${message}
                    </div>
                `;
            }

            function clearMessages() {
                document.getElementById('messageContainer').innerHTML = '';
            }

            function clearForm() {
                document.getElementById('productForm').reset();
            }

            function setLoading(isLoading) {
                const submitBtn = document.getElementById('submitBtn');

                if (isLoading) {
                    submitBtn.disabled = true;
                    submitBtn.innerHTML = '<div class="w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin-custom inline-block mr-2"></div>Adding...';
                } else {
                    submitBtn.disabled = false;
                    submitBtn.innerHTML = 'Add';
                }
            }

            document.getElementById('productForm').addEventListener('submit', async function(e) {
                e.preventDefault();

                clearMessages();
                clearValidationErrors();
                setLoading(true);

                const formData = new FormData(this);

                try {
                        const response = await fetch('https://localhost:7213/add-product', {
                        method: 'POST',
                        body: formData,
                        headers: {
                            'X-Requested-With': 'XMLHttpRequest'
                        }
                    });

                    const result = await response.json();

                    if (response.ok && result.success) {
                        showMessage('Product added successfully!', 'success');
                        clearForm();
                        loadProducts();
                        setTimeout(() => {
                            closeModal();
                        }, 2000);
                    } else {
                        if (result.errors) {
                            displayValidationErrors(result.errors);
                        } else {
                            showMessage(result.message || 'An error occurred while adding the product.', 'error');
                        }
                    }
                } catch (error) {
                    console.error('Error:', error);
                    showMessage('Network error occurred. Please try again.', 'error');
                } finally {
                    setLoading(false);
                }
            });

            document.getElementById('addProductModal').addEventListener('click', function(e) {
                if (e.target === this) {
                    closeModal();
                }
            });



        // Load products function
        async function loadProducts(page = 1, search = '') {
            try {
                showLoading(true);
                hideError();

                currentPage = page;
                currentSearch = search;

                // Build API URL
                    let url = `https://localhost:7213/get-products?page=${page}&pageSize=${pageSize}&SortOrder=desc`;
                if (search && search.trim() !== '') {
                    url += `&search=${encodeURIComponent(search.trim())}`;
                }

                const response = await fetch(url);

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const apiResponse = await response.json();

                if (apiResponse && apiResponse.data) {
                    totalRecords = apiResponse.data.totalRecords || 0;
                    totalPages = Math.ceil(totalRecords / pageSize);

                    renderProducts(apiResponse.data.data || []);
                    renderPagination(apiResponse.data);
                    renderResultsInfo(apiResponse.data);

                    if (totalRecords === 0) {
                        showNoResults(true);
                    } else {
                        showNoResults(false);
                    }
                } else {
                    throw new Error('Invalid response format');
                }

            } catch (error) {
                console.error('Error loading products:', error);
                showError('Failed to load products. Please try again.');
                showNoResults(false);
            } finally {
                showLoading(false);
            }
        }

        // Search products
        function searchProducts() {
            const searchTerm = document.getElementById('searchInput').value;
            currentPage = 1; // Reset to first page when searching
            loadProducts(1, searchTerm);
        }

        // Clear search
        function clearSearch() {
            document.getElementById('searchInput').value = '';
            currentSearch = '';
            currentPage = 1;
            loadProducts();
        }

        // Render products
            // Render products
             function renderProducts(products) {
                 const grid = document.getElementById('productsGrid');

                 if (!products || products.length === 0) {
                     grid.innerHTML = '';
                     return;
                 }

                 grid.innerHTML = products.map(product => {
                     const today = new Date();
                     const startDate = product.startDate ? new Date(product.startDate) : null;
                     const endDate = product.endDate ? new Date(product.endDate) : null;

                     const isDiscountValid = product.discount > 0 &&
                                           startDate && endDate &&
                                           startDate <= today &&
                                           endDate >= today;

                     const finalPrice = isDiscountValid ?
                                      product.price - (product.price * product.discount / 100) :
                                      product.price;

                  return `
                          <div class="border border-gray-300 font-inter p-4">
                                <img src="${product.image || '/placeholder-image.jpg'}" class="w-full h-40 object-cover" />

                                <div class="mt-2 font-semibold text-[16px] text-[#252C32]">${product.name}</div>

                                <div class="text-lg">
                                    <span class="text-black text-[18px] font-bold">${finalPrice.toFixed(2)}</span>
                                    ${isDiscountValid ? `
                                        <span class="text-[14px] text-gray-400 line-through ml-2">
                                            ${product.price.toFixed(2)}
                                        </span>
                                    ` : ''}
                                </div>

                                     <div class="mt-4 flex items-center justify-start">
                                    ${product.remainingQuantity === 0
                                                    ? `<button class="font-inter bg-white border border-gray-300 px-4 py-2 rounded cursor-not-allowed" disabled>Out of Stock</button>`
                                    : product.remainingQuantity === product.quantity
                                                ? `<button onclick="addToCart('${product.id}')" class="font-inter bg-white border border-gray-300 px-4 py-2 rounded">Add To Cart</button>`
                                    : `
                                        <div class="flex items-center justify-start">
                                        <span class="bg-[#2F80ED] px-2 py-2 rounded-md flex items-center space-x-2">
                                            <button
                                                onclick="decreaseQuantity('${product.id}')"
                                                class="text-white px-2 rounded"
                                                id="minus-${product.id}">
                                                -
                                            </button>
                                            <span
                                                id="qty-${product.id}"
                                                data-max="${product.remainingQuantity}"
                                                    class="text-white text-[14px] px-2">${product.quantity - product.remainingQuantity}</span>
                                            <button
                                                onclick="increaseQuantity('${product.id}')"
                                                class="text-white px-2 rounded"
                                                id="plus-${product.id}">
                                                +
                                            </button>
                                        </span>
                                    </div>
                                    `}
                                </div>
                            </div>
                         `;

                 }).join('');
             }

        // Render pagination
        function renderPagination(data) {
            const container = document.getElementById('paginationContainer');

            if (!data || totalPages <= 1) {
                container.innerHTML = '';
                return;
            }

            let paginationHTML = `
                    <div class="flex gap-2 justify-end items-center">
                    <button onclick="loadProducts(${currentPage - 1}, '${currentSearch}')"
                            ${currentPage <= 1 ? 'disabled class="px-3 py-1 font-inter text-gray-400 cursor-not-allowed"' : 'class="px-3 py-1 font-inter text-blue-600 hover:bg-blue-50 rounded"'}>
                        ← Prev
                    </button>
            `;

            // Page numbers
            const startPage = Math.max(1, currentPage - 2);
            const endPage = Math.min(totalPages, currentPage + 2);

            if (startPage > 1) {
                paginationHTML += `
                    <button onclick="loadProducts(1, '${currentSearch}')"
                            class="px-3 py-1 font-inter rounded-md hover:bg-blue-50">1</button>
                `;
                if (startPage > 2) {
                    paginationHTML += `<span class="px-2 text-gray-400">...</span>`;
                }
            }

            for (let i = startPage; i <= endPage; i++) {
                paginationHTML += `
                    <button onclick="loadProducts(${i}, '${currentSearch}')"
                            class="px-3 py-1 font-inter rounded-md ${i === currentPage ? 'bg-blue-600 text-white' : 'hover:bg-blue-50'}">
                        ${i}
                    </button>
                `;
            }

            if (endPage < totalPages) {
                if (endPage < totalPages - 1) {
                    paginationHTML += `<span class="px-2 text-gray-400">...</span>`;
                }
                paginationHTML += `
                    <button onclick="loadProducts(${totalPages}, '${currentSearch}')"
                            class="px-3 py-1 font-inter rounded-md hover:bg-blue-50">${totalPages}</button>
                `;
            }

            paginationHTML += `
                    <button onclick="loadProducts(${currentPage + 1}, '${currentSearch}')"
                            ${currentPage >= totalPages ? 'disabled class="px-3 py-1 font-inter text-gray-400 cursor-not-allowed"' : 'class="px-3 py-1 font-inter text-blue-600 hover:bg-blue-50 rounded"'}>
                        Next →
                    </button>
                </div>

                <!-- Per page dropdown -->
                <div>
                    <select class="border font-inter px-2 py-1 rounded text-sm"
                            onchange="changePageSize(this.value)">
                        <option value="8" ${pageSize === 8 ? 'selected' : ''}>8 per page</option>
                        <option value="20" ${pageSize === 20 ? 'selected' : ''}>20 per page</option>
                        <option value="50" ${pageSize === 50 ? 'selected' : ''}>50 per page</option>
                    </select>
                </div>
            `;

            container.innerHTML = paginationHTML;
        }

        // Render results info
        function renderResultsInfo(data) {
            const info = document.getElementById('resultsInfo');

            if (!data || totalRecords === 0) {
                info.innerHTML = '';
                return;
            }

            const startRecord = (currentPage - 1) * pageSize + 1;
            const endRecord = Math.min(currentPage * pageSize, totalRecords);

            info.innerHTML = `Showing ${startRecord}-${endRecord} of ${totalRecords} results`;
        }

        // Change page size
        function changePageSize(newSize) {
            pageSize = parseInt(newSize);
            currentPage = 1;
            loadProducts(1, currentSearch);
        }

        // Quantity controls
        function increaseQuantity(productSlug) {
            const qtyElement = document.getElementById(`qty-${productSlug}`);
            let currentQty = parseInt(qtyElement.textContent);
            qtyElement.textContent = currentQty + 1;
        }

        function decreaseQuantity(productSlug) {
            const qtyElement = document.getElementById(`qty-${productSlug}`);
            let currentQty = parseInt(qtyElement.textContent);
            if (currentQty > 1) {
                qtyElement.textContent = currentQty - 1;
            }
        }

        // Add to cart (placeholder function)
        function addToCart(productSlug) {
            const qtyElement = document.getElementById(`qty-${productSlug}`);
            const quantity = parseInt(qtyElement.textContent);

            // You can implement the actual add to cart API call here
            console.log(`Adding ${quantity} of product ${productSlug} to cart`);
            alert(`Added ${quantity} item(s) to cart!`);
        }

        // Utility functions
        function showLoading(show) {
            const loading = document.getElementById('loadingIndicator');
            const container = document.getElementById('productsContainer');

            if (show) {
                loading.classList.remove('hidden');
                container.classList.add('loading');
            } else {
                loading.classList.add('hidden');
                container.classList.remove('loading');
            }
        }

        function showNoResults(show) {
            const noResults = document.getElementById('noResults');
            const container = document.getElementById('productsContainer');

            if (show) {
                noResults.classList.remove('hidden');
                container.classList.add('hidden');
            } else {
                noResults.classList.add('hidden');
                container.classList.remove('hidden');
            }
        }

        function showError(message) {
            const errorDiv = document.getElementById('errorMessage');
            const errorText = document.getElementById('errorText');

            errorText.textContent = message;
            errorDiv.classList.remove('hidden');
        }

        function hideError() {
            const errorDiv = document.getElementById('errorMessage');
            errorDiv.classList.add('hidden');
        }




          // Add product to cart
            function addToCart(productId) {
                    fetch('https://localhost:7213/add-cart-item', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ productId, quantity: 1 })
                })
                .then(res => res.json())
                .then(() => {alert('Product added to cart!')
                    loadProducts();
                })
                .catch(err => console.error('Error:', err));
            }

         
            // Update cart quantity
            function updateQuantity(productId, newCount) {
                    fetch(`https://localhost:7213/update-cart-items`, {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ productId,quantity: newCount })
                })
                .then(res => res.json())
                .then(() => {
                    const qtyElem = document.getElementById(`qty-${productId}`);
                    qtyElem.textContent = newCount;

                    const max = parseInt(qtyElem.getAttribute('data-max'));
                    document.getElementById(`minus-${productId}`).disabled = newCount <= 1;
                    document.getElementById(`plus-${productId}`).disabled = newCount >= max;
                })
                .catch(err => console.error('Update error:', err));
            }

            // Decrease quantity
            function decreaseQuantity(productId) {
                const qtyElem = document.getElementById(`qty-${productId}`);
                let current = parseInt(qtyElem.textContent);
                if (current > 1) {
                    let newCount = current - 1;
                    updateQuantity(productId, newCount);
                }
            }

            // Increase quantity
            function increaseQuantity(productId) {
                const qtyElem = document.getElementById(`qty-${productId}`);
                let current = parseInt(qtyElem.textContent);
                let max = parseInt(qtyElem.getAttribute('data-max'));
                if (current < max) {
                    let newCount = current + 1;
                    updateQuantity(productId, newCount);
                }
            }
    </script>
}



