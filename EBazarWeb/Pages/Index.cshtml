@page
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}

<header>
    <nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-light bg-white border-bottom box-shadow mb-3">
        <div class="border border-b border-gray-200">
            <div class="flex justify-between items-center container mx-auto py-4 ">
                <span>
                    <svg width="170" height="40" viewBox="0 0 170 40" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M20.0016 0C16.0457 0 12.1786 1.16767 8.88934 3.35536C5.60012 5.54304 3.03641 8.65247 1.52254 12.2905C0.00866561 15.9284 -0.387431 19.9316 0.384334 23.7937C1.1561 27.6558 3.06109 31.2032 5.85835 33.9874C8.65563 36.7719 12.2196 38.6681 16.0995 39.4365C19.9795 40.2047 24.0011 39.8104 27.656 38.3037C31.3109 36.7965 34.4344 34.2447 36.6325 30.9706C38.8302 27.6965 40.0033 23.8472 40.0033 19.9095C40.0033 14.6292 37.8961 9.56509 34.1449 5.83136C30.3938 2.0976 25.3065 0 20.0016 0ZM32.2882 22.8191C32.2882 23.2173 30.4824 23.2742 30.4824 23.6724C30.4824 24.0706 32.2684 24.611 32.2684 25.16C32.2684 25.8311 28.588 25.9306 28.588 26.602C28.588 27.3188 31.3796 27.0968 31.3796 27.8733C31.3796 28.7891 24.3677 28.3625 24.3677 29.3153C24.3677 29.6793 25.265 29.8301 26.388 29.9496C27.0051 30.0178 26.8707 30.3193 26.5194 30.5185C24.5564 31.7106 22.3013 32.3415 20.0016 32.3415C17.7021 32.3415 15.4469 31.7106 13.4839 30.5185C13.1353 30.3052 12.9982 30.0037 13.6154 29.9496C14.7383 29.8301 15.6384 29.6652 15.6384 29.3153C15.6384 28.3625 8.62355 28.7891 8.62355 27.8733C8.62355 27.0968 11.4181 27.3044 11.4181 26.602C11.4181 25.9306 7.73497 25.8311 7.73497 25.16C7.73497 24.611 9.5237 24.0791 9.5237 23.6724C9.5237 23.2657 7.71495 23.2201 7.71495 22.8191C7.71495 22.4181 9.03508 22.1593 9.03508 21.8748C9.03508 21.3373 7.50063 22.3157 7.50063 19.9095C7.50063 16.6093 8.81776 13.4442 11.1621 11.1107C13.5065 8.77706 16.6862 7.46605 20.0016 7.46605C23.3171 7.46605 26.4969 8.77706 28.8413 11.1107C31.1856 13.4442 32.5026 16.6093 32.5026 19.9095C32.5026 22.3157 30.9683 21.3316 30.9683 21.8748C30.9683 22.1593 32.2882 22.3897 32.2882 22.8191Z" fill="#2F80ED" />
                        <path d="M48.8849 29.7208V10H62.1733V13.4377H53.0544V18.1367H61.4897V21.5744H53.0544V26.2831H62.2119V29.7208H48.8849Z" fill="#2F80ED" />
                        <path d="M74.4637 18.233V21.4877H65.47V18.233H74.4637Z" fill="#2F80ED" />
                        <path d="M77.8735 29.7208V10H85.7695C87.2203 10 88.4304 10.2151 89.3997 10.6452C90.3691 11.0753 91.0977 11.6723 91.5856 12.4362C92.0734 13.1937 92.3174 14.0668 92.3174 15.0554C92.3174 15.8257 92.1633 16.503 91.8552 17.0871C91.547 17.6649 91.1233 18.1399 90.5841 18.5123C90.0513 18.8782 89.4414 19.1382 88.7545 19.2922V19.4848C89.5056 19.5169 90.2086 19.7288 90.8634 20.1204C91.5246 20.512 92.0606 21.0608 92.4714 21.767C92.8823 22.4667 93.0877 23.3012 93.0877 24.2706C93.0877 25.317 92.8277 26.251 92.3077 27.0727C91.7942 27.888 91.0335 28.5331 90.0256 29.0082C89.0177 29.4832 87.7756 29.7208 86.2991 29.7208H77.8735ZM82.0429 26.312H85.4421C86.604 26.312 87.4514 26.0905 87.9842 25.6476C88.517 25.1982 88.7834 24.6012 88.7834 23.8565C88.7834 23.3109 88.6518 22.8294 88.3886 22.4121C88.1254 21.9949 87.7499 21.6675 87.262 21.4299C86.7805 21.1924 86.206 21.0737 85.5384 21.0737H82.0429V26.312ZM82.0429 18.2523H85.1339C85.7053 18.2523 86.2124 18.1528 86.6554 17.9538C87.1047 17.7484 87.4578 17.4595 87.7146 17.0871C87.9778 16.7148 88.1094 16.2687 88.1094 15.7487C88.1094 15.0361 87.8558 14.4616 87.3487 14.025C86.8479 13.5885 86.1354 13.3702 85.211 13.3702H82.0429V18.2523Z" fill="#2F80ED" />
                        <path d="M99.7787 30C98.835 30 97.994 29.8363 97.2558 29.5089C96.5175 29.1751 95.9334 28.684 95.5033 28.0356C95.0796 27.3808 94.8677 26.5656 94.8677 25.5898C94.8677 24.7681 95.0186 24.078 95.3203 23.5195C95.622 22.961 96.0329 22.5116 96.5528 22.1714C97.0728 21.8312 97.6634 21.5744 98.3246 21.4011C98.9923 21.2277 99.692 21.1058 100.424 21.0351C101.284 20.9453 101.977 20.8618 102.504 20.7848C103.03 20.7013 103.412 20.5794 103.65 20.4189C103.887 20.2584 104.006 20.0209 104.006 19.7063V19.6485C104.006 19.0387 103.813 18.5668 103.428 18.233C103.049 17.8992 102.51 17.7323 101.81 17.7323C101.072 17.7323 100.485 17.896 100.048 18.2234C99.6117 18.5444 99.3229 18.9488 99.1816 19.4367L95.3877 19.1286C95.5803 18.2298 95.959 17.4531 96.524 16.7983C97.0889 16.1371 97.8175 15.6299 98.7098 15.2768C99.6085 14.9173 100.649 14.7376 101.83 14.7376C102.651 14.7376 103.438 14.8339 104.189 15.0265C104.946 15.2191 105.617 15.5176 106.201 15.922C106.792 16.3264 107.257 16.8464 107.598 17.4819C107.938 18.1111 108.108 18.8654 108.108 19.7448V29.7208H104.218V27.6697H104.102C103.865 28.1319 103.547 28.5396 103.149 28.8926C102.751 29.2393 102.273 29.5121 101.714 29.7111C101.156 29.9037 100.51 30 99.7787 30ZM100.953 27.169C101.557 27.169 102.09 27.0502 102.552 26.8127C103.014 26.5688 103.377 26.2414 103.64 25.8305C103.903 25.4197 104.035 24.9543 104.035 24.4343V22.8647C103.906 22.9482 103.73 23.0252 103.505 23.0958C103.287 23.16 103.04 23.221 102.764 23.2788C102.488 23.3301 102.212 23.3783 101.936 23.4232C101.66 23.4617 101.409 23.497 101.185 23.5291C100.703 23.5997 100.283 23.7121 99.9231 23.8662C99.5636 24.0202 99.2844 24.2289 99.0853 24.4921C98.8863 24.7488 98.7868 25.0698 98.7868 25.455C98.7868 26.0135 98.9891 26.4404 99.3935 26.7357C99.8043 27.0246 100.324 27.169 100.953 27.169Z" fill="#2F80ED" />
                        <path d="M111.051 29.7208V27.2749L118.292 18.3101V18.2041H111.301V14.9302H123.232V17.5975L116.433 26.3409V26.4468H123.482V29.7208H111.051Z" fill="#2F80ED" />
                        <path d="M130.674 30C129.73 30 128.889 29.8363 128.151 29.5089C127.413 29.1751 126.828 28.684 126.398 28.0356C125.975 27.3808 125.763 26.5656 125.763 25.5898C125.763 24.7681 125.914 24.078 126.215 23.5195C126.517 22.961 126.928 22.5116 127.448 22.1714C127.968 21.8312 128.559 21.5744 129.22 21.4011C129.887 21.2277 130.587 21.1058 131.319 21.0351C132.179 20.9453 132.872 20.8618 133.399 20.7848C133.925 20.7013 134.307 20.5794 134.545 20.4189C134.782 20.2584 134.901 20.0209 134.901 19.7063V19.6485C134.901 19.0387 134.708 18.5668 134.323 18.233C133.945 17.8992 133.405 17.7323 132.706 17.7323C131.967 17.7323 131.38 17.896 130.943 18.2234C130.507 18.5444 130.218 18.9488 130.077 19.4367L126.283 19.1286C126.475 18.2298 126.854 17.4531 127.419 16.7983C127.984 16.1371 128.713 15.6299 129.605 15.2768C130.504 14.9173 131.544 14.7376 132.725 14.7376C133.547 14.7376 134.333 14.8339 135.084 15.0265C135.841 15.2191 136.512 15.5176 137.097 15.922C137.687 16.3264 138.153 16.8464 138.493 17.4819C138.833 18.1111 139.003 18.8654 139.003 19.7448V29.7208H135.113V27.6697H134.997C134.76 28.1319 134.442 28.5396 134.044 28.8926C133.646 29.2393 133.168 29.5121 132.609 29.7111C132.051 29.9037 131.406 30 130.674 30ZM131.849 27.169C132.452 27.169 132.985 27.0502 133.447 26.8127C133.909 26.5688 134.272 26.2414 134.535 25.8305C134.798 25.4197 134.93 24.9543 134.93 24.4343V22.8647C134.802 22.9482 134.625 23.0252 134.4 23.0958C134.182 23.16 133.935 23.221 133.659 23.2788C133.383 23.3301 133.107 23.3783 132.831 23.4232C132.555 23.4617 132.304 23.497 132.08 23.5291C131.598 23.5997 131.178 23.7121 130.818 23.8662C130.459 24.0202 130.179 24.2289 129.98 24.4921C129.781 24.7488 129.682 25.0698 129.682 25.455C129.682 26.0135 129.884 26.4404 130.289 26.7357C130.699 27.0246 131.219 27.169 131.849 27.169Z" fill="#2F80ED" />
                        <path d="M146.24 30C145.297 30 144.456 29.8363 143.718 29.5089C142.979 29.1751 142.395 28.684 141.965 28.0356C141.541 27.3808 141.33 26.5656 141.33 25.5898C141.33 24.7681 141.48 24.078 141.782 23.5195C142.084 22.961 142.495 22.5116 143.015 22.1714C143.535 21.8312 144.125 21.5744 144.786 21.4011C145.454 21.2277 146.154 21.1058 146.886 21.0351C147.746 20.9453 148.439 20.8618 148.966 20.7848C149.492 20.7013 149.874 20.5794 150.111 20.4189C150.349 20.2584 150.468 20.0209 150.468 19.7063V19.6485C150.468 19.0387 150.275 18.5668 149.89 18.233C149.511 17.8992 148.972 17.7323 148.272 17.7323C147.534 17.7323 146.947 17.896 146.51 18.2234C146.074 18.5444 145.785 18.9488 145.643 19.4367L141.85 19.1286C142.042 18.2298 142.421 17.4531 142.986 16.7983C143.551 16.1371 144.279 15.6299 145.172 15.2768C146.07 14.9173 147.11 14.7376 148.292 14.7376C149.113 14.7376 149.9 14.8339 150.651 15.0265C151.408 15.2191 152.079 15.5176 152.663 15.922C153.254 16.3264 153.719 16.8464 154.059 17.4819C154.4 18.1111 154.57 18.8654 154.57 19.7448V29.7208H150.68V27.6697H150.564C150.327 28.1319 150.009 28.5396 149.611 28.8926C149.213 29.2393 148.734 29.5121 148.176 29.7111C147.617 29.9037 146.972 30 146.24 30ZM147.415 27.169C148.019 27.169 148.552 27.0502 149.014 26.8127C149.476 26.5688 149.839 26.2414 150.102 25.8305C150.365 25.4197 150.497 24.9543 150.497 24.4343V22.8647C150.368 22.9482 150.192 23.0252 149.967 23.0958C149.749 23.16 149.502 23.221 149.226 23.2788C148.95 23.3301 148.673 23.3783 148.397 23.4232C148.121 23.4617 147.871 23.497 147.646 23.5291C147.165 23.5997 146.744 23.7121 146.385 23.8662C146.025 24.0202 145.746 24.2289 145.547 24.4921C145.348 24.7488 145.249 25.0698 145.249 25.455C145.249 26.0135 145.451 26.4404 145.855 26.7357C146.266 27.0246 146.786 27.169 147.415 27.169Z" fill="#2F80ED" />
                        <path d="M157.59 29.7208V14.9302H161.566V17.5108H161.721C161.99 16.5928 162.443 15.8995 163.078 15.4309C163.714 14.9559 164.446 14.7183 165.274 14.7183C165.479 14.7183 165.701 14.7312 165.938 14.7569C166.176 14.7825 166.384 14.8178 166.564 14.8628V18.5026C166.371 18.4449 166.105 18.3935 165.765 18.3486C165.425 18.3036 165.113 18.2812 164.831 18.2812C164.227 18.2812 163.688 18.4128 163.213 18.676C162.744 18.9328 162.372 19.2922 162.096 19.7545C161.826 20.2167 161.692 20.7495 161.692 21.3529V29.7208H157.59Z" fill="#2F80ED" />
                    </svg>
                </span>
                <span onclick="openCart()" class="flex justify-between items-center border border-gray-200 rounded-md px-4 gap-2 py-1 hover:cursor-pointer">
                    <svg width="32" height="32" viewBox="0 0 32 32" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M6.66671 4C6.31309 4 5.97395 4.14048 5.7239 4.39052C5.47385 4.64057 5.33337 4.97971 5.33337 5.33333C5.33337 5.68696 5.47385 6.02609 5.7239 6.27614C5.97395 6.52619 6.31309 6.66667 6.66671 6.66667H8.29337L8.70004 8.296C8.70408 8.31476 8.70853 8.33343 8.71337 8.352L10.524 15.592L9.33337 16.7813C7.65337 18.4613 8.84271 21.3333 11.2187 21.3333H22.6667C23.0203 21.3333 23.3595 21.1929 23.6095 20.9428C23.8596 20.6928 24 20.3536 24 20C24 19.6464 23.8596 19.3072 23.6095 19.0572C23.3595 18.8071 23.0203 18.6667 22.6667 18.6667H11.2187L12.552 17.3333H21.3334C21.5809 17.3332 21.8235 17.2642 22.0341 17.1339C22.2446 17.0037 22.4147 16.8174 22.5254 16.596L26.5254 8.596C26.6269 8.39277 26.6749 8.16697 26.6646 7.94001C26.6544 7.71305 26.5864 7.49247 26.467 7.29919C26.3476 7.10592 26.1807 6.94636 25.9823 6.83566C25.784 6.72496 25.5606 6.66679 25.3334 6.66667H11.04L10.6267 5.00933C10.5545 4.721 10.388 4.46508 10.1537 4.28221C9.91932 4.09934 9.63061 4.00001 9.33337 4H6.66671ZM24 24.6667C24 25.1971 23.7893 25.7058 23.4143 26.0809C23.0392 26.4559 22.5305 26.6667 22 26.6667C21.4696 26.6667 20.9609 26.4559 20.5858 26.0809C20.2108 25.7058 20 25.1971 20 24.6667C20 24.1362 20.2108 23.6275 20.5858 23.2525C20.9609 22.8774 21.4696 22.6667 22 22.6667C22.5305 22.6667 23.0392 22.8774 23.4143 23.2525C23.7893 23.6275 24 24.1362 24 24.6667ZM11.3334 26.6667C11.8638 26.6667 12.3725 26.4559 12.7476 26.0809C13.1227 25.7058 13.3334 25.1971 13.3334 24.6667C13.3334 24.1362 13.1227 23.6275 12.7476 23.2525C12.3725 22.8774 11.8638 22.6667 11.3334 22.6667C10.8029 22.6667 10.2942 22.8774 9.91916 23.2525C9.54409 23.6275 9.33337 24.1362 9.33337 24.6667C9.33337 25.1971 9.54409 25.7058 9.91916 26.0809C10.2942 26.4559 10.8029 26.6667 11.3334 26.6667Z" fill="#2F80ED" />
                    </svg>
                    <span class=" text-base" id="cartItemCount"></span>
                </span>
         </div>
        </div>
    </nav>
</header>
<div class="container mx-auto">

    <main role="main" class="pb-3">
        <div class="ps-3 pe-3 xl:ps-0 xl:pe-0">
            @*  Top Three Boxs *@
            <div class="grid grid-cols-1 md:grid-cols-3 mt-5 gap-5">
                <div class="bg-[#2F80ED] p-4 rounded-lg">
                    <div class="flex flex-col ps-3 pe-5 pt-3 pb-3 gap-4">
                        <div class="flex justify-start">
                            <svg width="48" height="48" viewBox="0 0 48 48" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <rect width="48" height="48" rx="8" fill="white" />
                                <path d="M39.5803 18.8518L24.5802 8.185C24.2335 7.93833 23.7682 7.93833 23.4215 8.185L8.42134 18.8518C8.15733 19.0384 8 19.3425 8 19.6665V24.3332C8 24.7078 8.20934 25.0505 8.54134 25.2225C8.87468 25.3932 9.27335 25.3652 9.57868 25.1492L10.6667 24.3745V38.6667C10.6667 39.4027 11.264 40 12 40H14.6667V23.9998H33.3336V40H36.0003C36.7363 40 37.3336 39.4027 37.3336 38.6667V24.3745L38.4203 25.1478C38.5937 25.2705 38.7963 25.3332 39.0003 25.3332C39.1577 25.3332 39.3137 25.2958 39.459 25.2225C39.791 25.0505 40.0003 24.7078 40.0003 24.3332V19.6665C40.0003 19.3425 39.843 19.0384 39.5803 18.8518Z" fill="#2F80ED" />
                                <path d="M16.6668 36.6666H31.3336V40H16.6668V36.6666Z" fill="#2F80ED" />
                                <path d="M16.6668 31.3332H31.3336V34.6666H16.6668V31.3332Z" fill="#2F80ED" />
                                <path d="M16.6668 25.9999H31.3336V29.3332H16.6668V25.9999Z" fill="#2F80ED" />
                            </svg>
                        </div>
                        <div class="flex flex-col gap-2">
                            <h3 class="text-white  text-[22px] font-semibold">Total Product : 100</h3>
                            <p class="text-white  text-[16px] leading-relaxed">
                                Warehouse has total of 100 product today & the max capacity is 200.
                            </p>
                        </div>
                    </div>
                </div>

                <div class="bg-[#2F80ED] p-4 rounded-lg">
                    <div class="flex flex-col ps-3 pe-5 pt-3 pb-3 gap-4">
                        <div class="flex justify-start">
                            <svg width="48" height="48" viewBox="0 0 48 48" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <rect width="48" height="48" rx="8" fill="white" />
                                <path fill-rule="evenodd" clip-rule="evenodd" d="M17.7291 8C20.8845 8 23.4462 10.5618 23.4462 13.7172C23.4462 16.8726 20.8845 19.4344 17.7291 19.4344C14.5736 19.4344 12.0119 16.8726 12.0119 13.7172C12.0119 10.5618 14.5736 8 17.7291 8ZM25.7899 24.1299C27.33 22.8735 29.2969 22.1189 31.4379 22.1189C36.3719 22.1189 40.3784 26.1255 40.3784 31.0595C40.3784 35.9934 36.3719 40 31.4379 40C26.5039 40 22.4973 35.9934 22.4973 31.0595C22.4973 27.9374 24.1055 25.5044 25.7899 24.1299ZM30.2482 35.4379C30.2864 36.0614 30.8049 36.5561 31.4379 36.5561C32.059 36.5561 32.5704 36.0793 32.6252 35.4713C32.7146 35.4487 32.8016 35.4224 32.8851 35.3926C33.9865 35.0028 34.7828 34.1553 34.7828 32.6807C34.7828 31.2371 33.7946 30.4944 32.4082 30.0903C31.9278 29.9496 31.3986 29.8471 30.936 29.6921C30.8013 29.6469 30.6738 29.5992 30.5629 29.5348C30.526 29.5133 30.4771 29.5014 30.4771 29.4525C30.4771 29.089 30.762 28.9543 31.0648 28.9125C31.6787 28.8267 32.4166 29.0103 32.9077 29.3536C33.4465 29.7303 34.1904 29.598 34.5671 29.0592C34.9438 28.5191 34.8127 27.7753 34.2726 27.3986C33.8101 27.0755 33.2332 26.8252 32.6276 26.675C32.5859 26.0539 32.0685 25.5628 31.4379 25.5628C30.8156 25.5628 30.303 26.0408 30.2506 26.65C29.5866 26.8324 29.0239 27.1888 28.6389 27.7073C28.3075 28.152 28.0929 28.7242 28.0929 29.4525C28.0929 30.8961 29.0812 31.6388 30.4675 32.0429C30.948 32.1836 31.4772 32.2861 31.9398 32.4411C32.0745 32.4864 32.202 32.5352 32.3129 32.5984C32.3498 32.6199 32.3987 32.6318 32.3987 32.6807C32.3987 33.0407 32.1162 33.167 31.817 33.2076C31.1947 33.2922 30.4497 33.1039 29.9526 32.7689C29.4066 32.4005 28.6651 32.5448 28.2968 33.0907C27.9296 33.6355 28.0739 34.377 28.6186 34.7453C29.0776 35.0553 29.6474 35.2925 30.2482 35.4379ZM22.6559 38.2071C18.7983 38.2119 13.5353 38.2119 10.585 38.2119C8.67645 38.2119 7.10411 36.7146 7.01113 34.8085C7.01113 34.7978 7.01113 34.7859 7.00994 34.7751C6.96941 32.7808 7.03139 29.6862 7.60597 26.1982C7.90995 24.3552 9.48706 22.0378 11.094 21.0592C11.1595 21.0198 11.2239 20.9805 11.2883 20.9423C11.6972 20.698 12.2133 20.7206 12.5996 21.0019C14.0825 22.0796 15.9076 22.7149 17.8793 22.7149C19.8509 22.7149 21.676 22.0796 23.1589 21.0019C23.5428 20.723 24.0542 20.6992 24.4631 20.9388C24.5298 20.9781 24.5966 21.0186 24.6645 21.0592C24.8851 21.1927 25.1044 21.3512 25.3202 21.5288C24.9602 21.7613 24.6133 22.0128 24.2831 22.2834C22.1493 24.0238 20.1132 27.1065 20.1132 31.0595C20.1132 33.769 21.0669 36.2569 22.6559 38.2071Z" fill="#2F80ED" />
                            </svg>

                        </div>
                        <div class="flex flex-col gap-2">
                            <h3 class="text-white  text-[22px] font-semibold">Total Vendor: 06</h3>
                            <p class="text-white  text-[16px] leading-relaxed">
                                A total of 6 out of 10 vendor are available for supply now.
                            </p>
                        </div>
                    </div>
                </div>

                <div class="bg-[#2F80ED] p-4 rounded-lg">
                    <div class="flex flex-col ps-3 pe-5 pt-3 pb-3 gap-4">
                        <div class="flex justify-start">
                            <svg width="48" height="48" viewBox="0 0 48 48" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <rect width="48" height="48" rx="8" fill="white" />
                                <path d="M21.3627 22.5642C21.8067 22.75 22.2673 22.8936 22.7383 22.9929V40C22.4494 39.9255 22.1683 39.8239 21.8987 39.6963L11.1799 34.9265C10.2335 34.5052 9.42945 33.8186 8.86509 32.9499C8.30074 32.0812 8.00025 31.0675 8 30.0316V18.1337C8.00142 17.6566 8.06753 17.1818 8.19651 16.7224L21.3627 22.5642ZM29.1159 18.5804L14.5563 11.7382L11.1799 13.2388C10.571 13.5065 10.0191 13.8886 9.55422 14.3643L22.4346 20.0988C22.9521 20.3285 23.512 20.4472 24.0781 20.4472C24.6443 20.4472 25.2042 20.3285 25.7217 20.0988L29.1159 18.5804ZM38.602 14.3643C38.1372 13.8886 37.5853 13.5065 36.9764 13.2388L26.2576 8.469C25.5726 8.15987 24.8297 8 24.0781 8C23.3266 8 22.5837 8.15987 21.8987 8.469L17.8077 10.2912L32.3673 17.1333L38.602 14.3643ZM39.9598 16.7224L33.6893 19.5093V23.8861C33.6893 24.2415 33.5481 24.5823 33.2969 24.8336C33.0456 25.0848 32.7048 25.226 32.3494 25.226C31.9941 25.226 31.6533 25.0848 31.402 24.8336C31.1508 24.5823 31.0096 24.2415 31.0096 23.8861V20.6884L26.7936 22.5642C26.3466 22.742 25.8868 22.8853 25.418 22.9929V40C25.7068 39.9255 25.988 39.8239 26.2576 39.6963L36.9764 34.9265C37.9228 34.5052 38.7268 33.8186 39.2912 32.9499C39.8555 32.0812 40.156 31.0675 40.1563 30.0316V18.1337C40.1548 17.6566 40.0887 17.1818 39.9598 16.7224Z" fill="#2F80ED" />
                            </svg>
                        </div>
                        <div class="flex flex-col gap-2">
                            <h3 class="text-white  text-[22px] font-semibold">Unique Product : 40</h3>
                            <p class="text-white  text-[16px] leading-relaxed">
                                Total number of products that are not duplicate or redundant.
                            </p>
                        </div>
                    </div>
                </div>
            </div>
            <div class="mt-5">
                <div class="flex flex-col sm:flex-row sm:items-center gap-4 w-full mx-auto">
                    <!-- Search box -->
                    <div class="flex items-center w-full h-[48px] bg-gray-100 rounded-md px-4 py-2">
                        <input type="text"
                               id="searchInput"
                               placeholder="Search Product"
                               class="flex-grow bg-transparent  text-[14px] outline-none text-gray-700" />
                        <svg xmlns="http://www.w3.org/2000/svg"
                             class="h-5 w-5 text-blue-600 cursor-pointer"
                             fill="none"
                             viewBox="0 0 24 24"
                             stroke="currentColor"
                             onclick="searchProducts()">
                            <path stroke-linecap="round"
                                  stroke-linejoin="round"
                                  stroke-width="2"
                                  d="M21 21l-4.35-4.35M17 10a7 7 0 11-14 0 7 7 0 0114 0z" />
                        </svg>
                    </div>

                    <!-- Add Product button -->
                    <button onclick="openModal()" class="flex items-center justify-center gap-1 border border-blue-500 text-blue-500 hover:bg-blue-50 font-medium px-3 py-1.5 h-[48px] rounded-md min-w-[220px]">
                        <svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <g clip-path="url(#clip0_4_227)">
                                <path d="M10 20C4.48578 20 0 15.5142 0 10C0 4.48578 4.48578 0 10 0C15.5142 0 20 4.48578 20 10C20 15.5142 15.5142 20 10 20ZM10 1.25C5.17502 1.25 1.25 5.17502 1.25 10C1.25 14.825 5.17502 18.75 10 18.75C14.825 18.75 18.75 14.825 18.75 10C18.75 5.17502 14.825 1.25 10 1.25Z" fill="#2F80ED" />
                                <path d="M14.375 10.625H5.625C5.28 10.625 5 10.345 5 10C5 9.655 5.28 9.375 5.625 9.375H14.375C14.72 9.375 15 9.655 15 10C15 10.345 14.72 10.625 14.375 10.625Z" fill="#2F80ED" />
                                <path d="M10 15C9.655 15 9.375 14.72 9.375 14.375V5.625C9.375 5.28 9.655 5 10 5C10.345 5 10.625 5.28 10.625 5.625V14.375C10.625 14.72 10.345 15 10 15Z" fill="#2F80ED" />
                            </g>
                            <defs>
                                <clipPath id="clip0_4_227">
                                    <rect width="20" height="20" fill="white" />
                                </clipPath>
                            </defs>
                        </svg>
                        Add Product
                    </button>
                </div>
            </div>

            <!-- Loading indicator -->
            <div id="loadingIndicator" class="hidden mt-4 text-center">
                <div class="inline-flex items-center">
                    <svg class="animate-spin h-5 w-5 mr-3 text-blue-600" viewBox="0 0 24 24">
                        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                    Loading products...
                </div>
            </div>

            <!-- Product Section -->
            <div class="mt-5">
                <div id="resultsInfo" class="text-sm text-gray-600 mb-4 text-[24px]  mb-5">
                    <!-- Results info will be populated by JavaScript -->
                </div>

                <div id="productsContainer">
                    <div id="productsGrid" class="grid grid-cols-1 sm:grid-cols-1 md:grid-cols-2 lg:grid-cols-4">
                        <!-- Products will be populated by JavaScript -->
                    </div>

                    <!-- Pagination -->
                    <div id="paginationContainer" class="flex flex-col sm:flex-row items-center justify-end mt-6 gap-4">
                        <!-- Pagination will be populated by JavaScript -->
                    </div>
                </div>

                <!-- No results message -->
                <div id="noResults" class="hidden text-center py-8">
                    <div class="text-gray-500 text-lg">No products found</div>
                    <div class="text-gray-400 text-sm mt-2">Try adjusting your search criteria</div>
                </div>

                <!-- Error message -->
                <div id="errorMessage" class="hidden bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mt-4">
                    <span id="errorText">Failed to load products. Please try again.</span>
                </div>
            </div>
            <!-- Add Product Modal -->
            <div id="addProductModal" class="fixed inset-0 z-50 flex items-center justify-center bg-black/30 backdrop-blur-sm hidden">
                <div class="bg-white rounded-lg shadow-lg w-full max-w-[70%] p-6 mx-4">
                    <div class="flex justify-between items-center mb-4">
                        <h2 class="text-2xl font-semibold">Add New Product</h2>
                        <button onclick="closeModal()" class="text-gray-500 hover:text-gray-600 text-2xl">&times;</button>
                    </div>

                    <!-- Messages -->
                    <div id="messageContainer"></div>

                    <form id="productForm" class="space-y-4">
                        <div id="validationSummary"></div>

                        <div>
                            <label class="block text-sm font-medium">Product Name</label>
                            <input name="Name" type="text" class="w-full border border-gray-300 rounded-md px-3 py-2" />
                            <span id="Name-error" class="text-red-600 text-sm"></span>
                        </div>

                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div>
                                <label class="block text-sm font-medium mb-2">Slug</label>
                                <div class="flex flex-col sm:flex-row gap-2 sm:gap-0">
                                    <input name="Slug" id="slugInput" type="text"
                                           class="flex-grow border border-gray-300 rounded-md sm:rounded-l-md sm:rounded-r-none px-3 py-2"
                                           placeholder="Enter slug..." />
                                    <button type="button" onclick="generateSlug()"
                                            class="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-md sm:rounded-l-none sm:rounded-r-md whitespace-nowrap transition-colors">
                                        Generate
                                    </button>
                                </div>
                                <span id="Slug-error" class="text-red-600 text-sm block mt-1"></span>
                            </div>
                            <div>
                                <label class="block text-sm font-medium mb-2">Price</label>
                                <input name="Price" type="number" step="0.01"
                                       class="w-full border border-gray-300 rounded-md px-3 py-2"
                                       placeholder="0.00" />
                                <span id="Price-error" class="text-red-600 text-sm block mt-1"></span>
                            </div>
                        </div>

                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div>
                                <label class="block text-sm font-medium">Discount(In %)</label>
                                <input name="Discount" type="number" step="0.01" class="w-full border border-gray-300 rounded-md px-3 py-2" />
                                <span id="Discount-error" class="text-red-600 text-sm"></span>
                            </div>

                            <div>
                                <label class="block text-sm font-medium">Quantity</label>
                                <input name="Quantity" type="number" class="w-full border border-gray-300 rounded-md px-3 py-2" />
                                <span id="Quantity-error" class="text-red-600 text-sm"></span>
                            </div>
                        </div>

                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div>
                                <label class="block text-sm font-medium">Discount Start</label>
                                <input name="StartDate" type="date" class="w-full border border-gray-300 rounded-md px-3 py-2" />
                                <span id="StartDate-error" class="text-red-600 text-sm"></span>
                            </div>

                            <div>
                                <label class="block text-sm font-medium">Discount End</label>
                                <input name="EndDate" type="date" class="w-full border border-gray-300 rounded-md px-3 py-2" />
                                <span id="EndDate-error" class="text-red-600 text-sm"></span>
                            </div>
                        </div>

                        <div>
                            <label class="block text-sm font-medium">Product Image</label>
                            <input name="ImageFile" type="file" class="w-full border border-gray-300 rounded-md px-3 py-2" />
                            <span id="ImageFile-error" class="text-red-600 text-sm"></span>
                        </div>

                        <div class="flex justify-end">
                            <button type="submit" id="submitBtn" class="bg-blue-600 text-white px-6 py-2 rounded-md hover:bg-blue-700">
                                Add
                            </button>
                        </div>
                    </form>
                </div>
            </div>
    </main>
</div>
<!-- Modal Overlay -->
<div id="modalOverlay" class="modal-overlay fixed inset-0 bg-black/30 backdrop-blur-sm z-40"></div>

<div id="cartModal" class="cart-modal fixed top-0 right-0 h-screen w-[90%] md:w-[60%] xl:w-1/2 bg-white shadow-2xl z-50 flex flex-col px-5">
    <!-- Header -->
    <div class="flex items-center justify-between p-4 border-b border-gray-200">
        <h2 class="text-[40px]">Shopping Cart</h2>
        <button onclick="closeCart()" class="p-2 hover:bg-gray-100 rounded-full transition-colors">
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
        </button>
    </div>

    <!-- Loading State -->
    <div id="loadingState" class="hidden flex items-center justify-center h-64">
        <div class="text-center">
            <div class="loading-spinner mx-auto mb-4"></div>
            <p class="text-gray-600">Loading cart items...</p>
        </div>
    </div>

    <!-- Error State -->
    <div id="errorState" class="hidden p-4 text-center">
        <div class="text-red-500 mb-2">
            <svg class="w-12 h-12 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
        </div>
        <p class="text-gray-600 mb-4">Failed to load cart items</p>
        <button onclick="loadCartItems()" class="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 transition-colors">
            Retry
        </button>
    </div>

    <!-- Cart Content -->
    <div id="cartContent" class="flex flex-col h-full flex-1">
        <!-- Cart Items - remove flex-1, add max-height -->
        <div id="cartItems" class="overflow-y-auto p-4 space-y-4 max-h-[calc(100vh-200px)]">
            <!-- Items will be populated here -->
            <!-- Sample cart item for demonstration -->
            <div class="flex items-center space-x-4 p-4 border border-gray-200 rounded-lg">
                <img src="https://via.placeholder.com/80x80" alt="Product" class="w-20 h-20 object-cover rounded">
                <div class="flex-1">
                    <h3 class="font-semibold text-lg">Sample Product</h3>
                    <p class="text-gray-600">$29.99</p>
                </div>
                <div class="flex items-center space-x-2">
                    <button class="px-2 py-1 bg-gray-200 rounded">-</button>
                    <span>1</span>
                    <button class="px-2 py-1 bg-gray-200 rounded">+</button>
                </div>
            </div>
        </div>

        <!-- Cart Footer - ensure it stays at bottom -->
        <div class="border-t border-gray-200 p-4 bg-gray-50 mt-auto">
            <div class="flex justify-between items-center">
                <span class="text-[32px] text-[#777777]">Subtotal</span>
                <span id="totalAmount" class="text-[32px]">$29.99</span>
            </div>
        </div>
    </div>
</div>


@section Scripts {
    <script>
            // Global variables
            let currentPage = 1;
            let pageSize = 8;
            let currentSearch = '';
            let totalRecords = 0;
            let totalPages = 0;
            let totalItemsInCart= 0;

            // Initialize page
            document.addEventListener('DOMContentLoaded', function() {
                loadProducts();
                loadCartItems();
                // Add search on Enter key
                document.getElementById('searchInput').addEventListener('keypress', function(e) {
                    if (e.key === 'Enter') {
                        searchProducts();
                    }
                });
            });
               // Open Modal
               function openModal() {
                document.getElementById('addProductModal').classList.remove('hidden');
            }
                 // close Modal
            function closeModal() {
                document.getElementById('addProductModal').classList.add('hidden');
                clearForm();
                clearMessages();
                clearValidationErrors();
            }
                // generate Slug
            function generateSlug() {
                const nameInput = document.querySelector('input[name="Name"]');
                const slugInput = document.getElementById('slugInput');

                if (nameInput.value) {
                    const slug = nameInput.value
                        .toLowerCase()
                        .replace(/[^a-z0-9]+/g, '-')
                        .replace(/(^-|-$)/g, '');
                    slugInput.value = slug;
                }
            }
                // Clear Validation error
            function clearValidationErrors() {
                const errorElements = document.querySelectorAll('.text-red-600');
                errorElements.forEach(element => {
                    element.textContent = '';
                });
            }
                // Display Validation error
            function displayValidationErrors(errors) {
                clearValidationErrors();

                for (const [field, messages] of Object.entries(errors)) {
                    const errorElement = document.getElementById(`${field}-error`);
                    if (errorElement && messages.length > 0) {
                        errorElement.textContent = messages[0];
                    }
                }

            }

            function showMessage(message, type) {
                const messageContainer = document.getElementById('messageContainer');
                const messageClasses = type === 'success'
                    ? 'bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded mb-4'
                    : 'bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4';

                messageContainer.innerHTML = `
                    <div class="${messageClasses}">
                        ${message}
                    </div>
                `;
            }

            function clearMessages() {
                document.getElementById('messageContainer').innerHTML = '';
            }

            function clearForm() {
                document.getElementById('productForm').reset();
            }

            function setLoading(isLoading) {
                const submitBtn = document.getElementById('submitBtn');

                if (isLoading) {
                    submitBtn.disabled = true;
                    submitBtn.innerHTML = '<div class="w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin-custom inline-block mr-2"></div>Adding...';
                } else {
                    submitBtn.disabled = false;
                    submitBtn.innerHTML = 'Add';
                }
            }

            document.getElementById('productForm').addEventListener('submit', async function(e) {
                e.preventDefault();

                clearMessages();
                clearValidationErrors();
                setLoading(true);

                const formData = new FormData(this);

                try {
                        const response = await fetch('https://localhost:7213/add-product', {
                        method: 'POST',
                        body: formData,
                        headers: {
                            'X-Requested-With': 'XMLHttpRequest'
                        }
                    });

                    const result = await response.json();

                    if (response.ok && result.success) {
                        showMessage('Product added successfully!', 'success');
                        clearForm();
                        loadProducts();
                        setTimeout(() => {
                            closeModal();
                        }, 2000);
                    } else {
                        if (result.errors) {
                            displayValidationErrors(result.errors);
                        } else {
                            showMessage(result.message || 'An error occurred while adding the product.', 'error');
                        }
                    }
                } catch (error) {
                    console.error('Error:', error);
                    showMessage('Network error occurred. Please try again.', 'error');
                } finally {
                    setLoading(false);
                }
            });

            document.getElementById('addProductModal').addEventListener('click', function(e) {
                if (e.target === this) {
                    closeModal();
                }
            });



        // Load products function
        async function loadProducts(page = 1, search = '') {
            try {
                showLoading(true);
                hideError();

                currentPage = page;
                currentSearch = search;

                // Build API URL
                    let url = `https://localhost:7213/get-products?page=${page}&pageSize=${pageSize}&SortOrder=desc`;
                if (search && search.trim() !== '') {
                    url += `&search=${encodeURIComponent(search.trim())}`;
                }

                const response = await fetch(url);

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const apiResponse = await response.json();

                if (apiResponse && apiResponse.data) {
                    totalRecords = apiResponse.data.totalRecords || 0;
                    totalPages = Math.ceil(totalRecords / pageSize);

                    renderProducts(apiResponse.data.data || []);
                    renderPagination(apiResponse.data);
                    renderResultsInfo(apiResponse.data);

                    if (totalRecords === 0) {
                        showNoResults(true);
                    } else {
                        showNoResults(false);
                    }
                } else {
                    throw new Error('Invalid response format');
                }

            } catch (error) {
                console.error('Error loading products:', error);
                showError('Failed to load products. Please try again.');
                showNoResults(false);
            } finally {
                showLoading(false);
            }
        }





        // Search products
        function searchProducts() {
            const searchTerm = document.getElementById('searchInput').value;
            currentPage = 1; // Reset to first page when searching
            loadProducts(1, searchTerm);
        }

        // Clear search
        function clearSearch() {
            document.getElementById('searchInput').value = '';
            currentSearch = '';
            currentPage = 1;
            loadProducts();
        }

        // Render products
            // Render products
             function renderProducts(products) {
                 const grid = document.getElementById('productsGrid');

                 if (!products || products.length === 0) {
                     grid.innerHTML = '';
                     return;
                 }

                 grid.innerHTML = products.map(product => {
                     const today = new Date();
                     const startDate = product.startDate ? new Date(product.startDate) : null;
                     const endDate = product.endDate ? new Date(product.endDate) : null;

                     const isDiscountValid = product.discount > 0 &&
                                           startDate && endDate &&
                                           startDate <= today &&
                                           endDate >= today;

                     const finalPrice = isDiscountValid ?
                                      product.price - (product.price * product.discount / 100) :
                                      product.price;

                  return `
                          <div class="border border-gray-300  p-4">
                                <img src="${product.image || '/placeholder-image.jpg'}" class="w-full h-40 object-cover" />

                                <div class="mt-2 font-semibold text-[16px] text-[#252C32]">${product.name}</div>

                                <div class="text-lg">
                                    <span class="text-black text-[18px] font-bold">${finalPrice.toFixed(2)}</span>
                                    ${isDiscountValid ? `
                                        <span class="text-[14px] text-gray-400 line-through ml-2">
                                            ${product.price.toFixed(2)}
                                        </span>
                                    ` : ''}
                                </div>

                                     <div class="mt-4 flex items-center justify-start">
                                    ${product.remainingQuantity === 0
                                                    ? `<button class=" bg-white border border-gray-300 px-4 py-2 rounded cursor-not-allowed" disabled>Out of Stock</button>`
                                    : product.remainingQuantity === product.quantity
                                                ? `<button onclick="addToCart('${product.id}')" class=" bg-white border border-gray-300 px-4 py-2 rounded">Add To Cart</button>`
                                    : `
                                        <div class="flex items-center justify-start">
                                        <span class="bg-[#2F80ED] px-2 py-2 rounded-md flex items-center space-x-2">
                                            <button
                                                onclick="decreaseQuantity('${product.id}','${product.quantity}','${product.remainingQuantity}')"
                                                class="text-white px-2 rounded"
                                                id="minus-${product.id}">
                                                -
                                            </button>
                                            <span
                                                    class="text-white text-[14px] px-2">${product.quantity - product.remainingQuantity}</span>
                                            <button
                                                onclick="increaseQuantity('${product.id}','${product.quantity}','${product.remainingQuantity}')"
                                                class="text-white px-2 rounded"
                                                id="plus-${product.id}">
                                                +
                                            </button>
                                        </span>
                                    </div>
                                    `}
                                </div>
                            </div>
                         `;

                 }).join('');
             }

        // Render pagination
        function renderPagination(data) {
            const container = document.getElementById('paginationContainer');

            if (!data || totalPages <= 1) {
                container.innerHTML = '';
                return;
            }

            let paginationHTML = `
                    <div class="flex gap-2 justify-end items-center">
                    <button onclick="loadProducts(${currentPage - 1}, '${currentSearch}')"
                            ${currentPage <= 1 ? 'disabled class="px-3 py-1  text-gray-400 cursor-not-allowed"' : 'class="px-3 py-1  text-blue-600 hover:bg-blue-50 rounded"'}>
                        ← Prev
                    </button>
            `;

            // Page numbers
            const startPage = Math.max(1, currentPage - 2);
            const endPage = Math.min(totalPages, currentPage + 2);

            if (startPage > 1) {
                paginationHTML += `
                    <button onclick="loadProducts(1, '${currentSearch}')"
                            class="px-3 py-1  rounded-md hover:bg-blue-50">1</button>
                `;
                if (startPage > 2) {
                    paginationHTML += `<span class="px-2 text-gray-400">...</span>`;
                }
            }

            for (let i = startPage; i <= endPage; i++) {
                paginationHTML += `
                    <button onclick="loadProducts(${i}, '${currentSearch}')"
                            class="px-3 py-1  rounded-md ${i === currentPage ? 'bg-blue-600 text-white' : 'hover:bg-blue-50'}">
                        ${i}
                    </button>
                `;
            }

            if (endPage < totalPages) {
                if (endPage < totalPages - 1) {
                    paginationHTML += `<span class="px-2 text-gray-400">...</span>`;
                }
                paginationHTML += `
                    <button onclick="loadProducts(${totalPages}, '${currentSearch}')"
                            class="px-3 py-1  rounded-md hover:bg-blue-50">${totalPages}</button>
                `;
            }

            paginationHTML += `
                    <button onclick="loadProducts(${currentPage + 1}, '${currentSearch}')"
                            ${currentPage >= totalPages ? 'disabled class="px-3 py-1  text-gray-400 cursor-not-allowed"' : 'class="px-3 py-1  text-blue-600 hover:bg-blue-50 rounded"'}>
                        Next →
                    </button>
                </div>

                <!-- Per page dropdown -->
                <div>
                    <select class="border  px-2 py-1 rounded text-sm"
                            onchange="changePageSize(this.value)">
                        <option value="8" ${pageSize === 8 ? 'selected' : ''}>8 per page</option>
                        <option value="20" ${pageSize === 20 ? 'selected' : ''}>20 per page</option>
                        <option value="50" ${pageSize === 50 ? 'selected' : ''}>50 per page</option>
                    </select>
                </div>
            `;

            container.innerHTML = paginationHTML;
        }

        // Render results info
        function renderResultsInfo(data) {
            const info = document.getElementById('resultsInfo');

            if (!data || totalRecords === 0) {
                info.innerHTML = '';
                return;
            }

            const startRecord = (currentPage - 1) * pageSize + 1;
            const endRecord = Math.min(currentPage * pageSize, totalRecords);

            info.innerHTML = `Showing ${startRecord}-${endRecord} of ${totalRecords} results`;
        }

        // Change page size
        function changePageSize(newSize) {
            pageSize = parseInt(newSize);
            currentPage = 1;
            loadProducts(1, currentSearch);
        }

        // Utility functions
        function showLoading(show) {
            const loading = document.getElementById('loadingIndicator');
            const container = document.getElementById('productsContainer');

            if (show) {
                loading.classList.remove('hidden');
                container.classList.add('loading');
            } else {
                loading.classList.add('hidden');
                container.classList.remove('loading');
            }
        }

        function showNoResults(show) {
            const noResults = document.getElementById('noResults');
            const container = document.getElementById('productsContainer');

            if (show) {
                noResults.classList.remove('hidden');
                container.classList.add('hidden');
            } else {
                noResults.classList.add('hidden');
                container.classList.remove('hidden');
            }
        }

        function showError(message) {
            const errorDiv = document.getElementById('errorMessage');
            const errorText = document.getElementById('errorText');

            errorText.textContent = message;
            errorDiv.classList.remove('hidden');
        }

        function hideError() {
            const errorDiv = document.getElementById('errorMessage');
            errorDiv.classList.add('hidden');
        }


          // Add product to cart
            function addToCart(productId) {
                    fetch('https://localhost:7213/add-cart-item', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ productId, quantity: 1 })
                })
                .then(res => res.json())
                .then(() => {alert('Product added to cart!')
                    loadProducts();
                    loadCartItems();
                })
                .catch(err => console.error('Error:', err));
            }

         
            // Update cart quantity
            function updateQuantity(productId, newCount) {
                    fetch(`https://localhost:7213/update-cart-items`, {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ productId,quantity: newCount })
                })
                .then(res => res.json())
                .then(() => {
                    loadCartItems();
                    loadProducts();
                })
                .catch(err => console.error('Update error:', err));
            }

            // Decrease quantity
            function decreaseQuantity(productId,qunatity, remainingQuantity) {
                let qty = parseInt(qunatity);
                let remQty = parseInt(remainingQuantity);
                if(remQty>0){
                    let newCount = qty - remQty-1;
                   updateQuantity(productId, newCount);
                }
            }

            // Increase quantity
            function increaseQuantity(productId,qunatity, remainingQuantity) {
                let qty = parseInt(qunatity);
                let remQty = parseInt(remainingQuantity);
                if(remQty<qunatity){
                    let newCount = qty - remQty+1;
                   updateQuantity(productId, newCount);
                }
            }

            ///Cart Modal Related services
             // Cart functionality
        let cartData = null;
                // Load addToCart items function
       
        // Open cart modal
        function openCart() {
            const modal = document.getElementById('cartModal');
            const overlay = document.getElementById('modalOverlay');

            modal.classList.add('open');
            overlay.classList.add('open');
            document.body.style.overflow = 'hidden';

            loadCartItems();
            handleCartDataSuccess();
        }

        // Close cart modal
        function closeCart() {
            const modal = document.getElementById('cartModal');
            const overlay = document.getElementById('modalOverlay');

            modal.classList.remove('open');
            overlay.classList.remove('open');
            document.body.style.overflow = 'auto';
        }

        // Close modal when clicking overlay
        document.getElementById('modalOverlay').addEventListener('click', closeCart);

        // Load cart data via AJAX

         async function loadCartItems() {
            try {
                 showLoadingState();
                 let url = `https://localhost:7213/carts`;

                const response = await fetch(url);

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const apiResponse = await response.json();

                if (apiResponse && apiResponse.data) {
                    totalItemsInCart = Array.isArray(apiResponse.data.items) ? apiResponse.data.items.length : 0;
                    document.getElementById('cartItemCount').innerHTML=`Cart (${totalItemsInCart})`
                    cartData=apiResponse.data;
                   if (!apiResponse.data) {
                    showErrorState();
                   }
                } else {
                    throw new Error('Invalid response format');
                }

                 

            } catch (error) {
                document.getElementById('cartItemCount').innerHTML=`Cart (0)`
                 console.error('Error loading cart:', error);
                showErrorState();
            }
        }
    
        function handleCartDataSuccess() {
            hideLoadingState();
            renderCartItems();
            updateCartSummary();
        }

        function showLoadingState() {
            document.getElementById('loadingState').classList.remove('hidden');
            document.getElementById('cartContent').classList.add('hidden');
            document.getElementById('errorState').classList.add('hidden');
        }

        function hideLoadingState() {
            document.getElementById('loadingState').classList.add('hidden');
            document.getElementById('cartContent').classList.remove('hidden');
        }

        function showErrorState() {
            document.getElementById('loadingState').classList.add('hidden');
            document.getElementById('cartContent').classList.add('hidden');
            document.getElementById('errorState').classList.remove('hidden');
        }

        function renderCartItems() {
            const cartItemsContainer = document.getElementById('cartItems');

            if (!cartData || !cartData.items || cartData.items.length === 0) {
                cartItemsContainer.innerHTML = `
                    <div class="text-center py-8">
                        <svg class="w-16 h-16 mx-auto text-gray-300 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4m0 0L7 13m0 0l-2.5 2.5M7 13l2.5 2.5m6-2.5h5.5"/>
                        </svg>
                        <p class="text-gray-500">Your cart is empty</p>
                    </div>
                `;
                return;
            }

            const itemsHtml = cartData.items.map(item => {
                const today = new Date();
                const startDate = new Date(item.startDate);
                const endDate = new Date(item.endDate);

                const isDiscountActive = item.discount > 0 && today >= startDate && today <= endDate;
                const effectivePrice = isDiscountActive
                    ? item.price - (item.price * item.discount / 100)
                    : item.price;
                return `
                    <div class="flex items-center space-x-4 p-3  border-b border-dashed border-gray-200">
                        <img src="${item.image}" alt="${item.name}" class="w-16 h-16 object-cover rounded-md">
                        <div class="flex-1 min-w-0">
                            <div class="flex items-center justify-between">
                                <span class="font-medium text-black text-[20px]  truncate">${item.name}</span>
                                ${
                                    isDiscountActive
                                        ? `<span class="text-[20px] font-semibold text-[#777777] ">$${effectivePrice.toFixed(2)}</span>`
                                        : `<span class="text-[20px] font-semibold text-[#777777] ">$${item.price.toFixed(2)}</span>`
                                }
                            </div>
                            <div class="text-[16px] mt-1"><span class="text-[#777777]"> QTY: </span> ${item.quantity}</div>
                        </div>
                    </div>
                `;
            }).join('');

            cartItemsContainer.innerHTML = itemsHtml;
        }

             function updateCartSummary() {
            if (!cartData) return;

            const amount = Math.abs(cartData.totalAmount).toFixed(2) ?? 0;
            const totalAmountElement = document.getElementById('totalAmount');

            console.log("cartData ", cartData, "Amount ", amount);

            if (totalAmountElement) {
                totalAmountElement.innerHTML = `$${amount}`; 
            } else {
                console.error('totalAmount element not found');
            }
        }

    </script>
}



